{"ast":null,"code":"import Compound from '@compound-finance/compound-js';\nconst provider = 'INFURA URL HERE (MAINNET)';\nconst comptroller = Compound.util.getAddress(Compound.Comptroller);\nconst opf = Compound.util.getAddress(Compound.PriceFeed);\nconst cTokenDecimals = 8; // always 8\n\nconst blocksPerDay = 4 * 60 * 24; // 4 blocks in 1 minute\n\nconst daysPerYear = 365;\nconst ethMantissa = Math.pow(10, 18); // 1 * 10 ^ 18\n\nasync function calculateSupplyApy(cToken) {\n  const supplyRatePerBlock = await Compound.eth.read(cToken, 'function supplyRatePerBlock() returns (uint)', [], {\n    provider\n  });\n  return 100 * (Math.pow(supplyRatePerBlock / ethMantissa * blocksPerDay + 1, daysPerYear - 1) - 1);\n} // recives (Address, ticker sybol of underlaying asset, number Of Decimal of underlaying asset)\n\n\nasync function calculateCompApy(cToken, ticker, underlyingDecimals) {\n  // amount of Comp Tokens given out to lenders/ borrowers per block \n  let compSpeed = await Compound.eth.read(comptroller, 'function compSpeeds(address cToken) public returns (uint)', [cToken], {\n    provider\n  }); // get Comp Token Price with OrcaleSmartContract\n\n  let compPrice = await Compound.eth.read(opf, 'function price(string memory symbol) external view returns (uint)', [Compound.COMP], {\n    provider\n  }); // get Price of underlying asset => cToken represents asset => get current price of that asset\n\n  let underlyingPrice = await Compound.eth.read(opf, 'function price(string memory symbol) external view returns (uint)', [ticker], {\n    provider\n  }); // amount of cTokens that where emitted\n\n  let totalSupply = await Compound.eth.read(cToken, 'function totalSupply() returns (uint)', [], {\n    provider\n  }); // get exchange rate of cToken and underlying asset => 1 cDai can be 10 Dai etc\n\n  let exchangeRate = await Compound.eth.read(cToken, 'function exchangeRateCurrent() returns (uint)', [], {\n    provider\n  });\n  exchangeRate = +exchangeRate.toString() / ethMantissa;\n  compSpeed = compSpeed / 1e18; // COMP has 18 decimal places\n\n  compPrice = compPrice / 1e6; // price feed is USD price with 6 decimal places\n\n  underlyingPrice = underlyingPrice / 1e6;\n  totalSupply = +totalSupply.toString() * exchangeRate * underlyingPrice / Math.pow(10, underlyingDecimals);\n  const compPerDay = compSpeed * blocksPerDay;\n  return 100 * (compPrice * compPerDay / totalSupply) * 365;\n}\n\nasync function calculateApy(cToken, ticker) {\n  const underlyingDecimals = Compound.decimals[cToken.slice(1, 10)];\n  const cTokenAddress = Compound.util.getAddress(cToken);\n  const [supplyApy, compApy] = await Promise.all([calculateSupplyApy(cTokenAddress), calculateCompApy(cTokenAddress, ticker, underlyingDecimals)]);\n  return {\n    ticker,\n    supplyApy,\n    compApy\n  };\n}\n\nexport default calculateApy;","map":{"version":3,"sources":["/Users/harrytrippel/Desktop/DEFI/compound-dashboad/apy.js"],"names":["Compound","provider","comptroller","util","getAddress","Comptroller","opf","PriceFeed","cTokenDecimals","blocksPerDay","daysPerYear","ethMantissa","Math","pow","calculateSupplyApy","cToken","supplyRatePerBlock","eth","read","calculateCompApy","ticker","underlyingDecimals","compSpeed","compPrice","COMP","underlyingPrice","totalSupply","exchangeRate","toString","compPerDay","calculateApy","decimals","slice","cTokenAddress","supplyApy","compApy","Promise","all"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,+BAArB;AAEA,MAAMC,QAAQ,GAAG,2BAAjB;AAEA,MAAMC,WAAW,GAAGF,QAAQ,CAACG,IAAT,CAAcC,UAAd,CAAyBJ,QAAQ,CAACK,WAAlC,CAApB;AACA,MAAMC,GAAG,GAAGN,QAAQ,CAACG,IAAT,CAAcC,UAAd,CAAyBJ,QAAQ,CAACO,SAAlC,CAAZ;AAEA,MAAMC,cAAc,GAAG,CAAvB,C,CAA0B;;AAC1B,MAAMC,YAAY,GAAG,IAAI,EAAJ,GAAS,EAA9B,C,CAAkC;;AAClC,MAAMC,WAAW,GAAG,GAApB;AACA,MAAMC,WAAW,GAAGC,IAAI,CAACC,GAAL,CAAS,EAAT,EAAa,EAAb,CAApB,C,CAAsC;;AAEtC,eAAeC,kBAAf,CAAkCC,MAAlC,EAA0C;AACtC,QAAMC,kBAAkB,GAAG,MAAMhB,QAAQ,CAACiB,GAAT,CAAaC,IAAb,CAC7BH,MAD6B,EAE7B,8CAF6B,EAG7B,EAH6B,EAI7B;AAAEd,IAAAA;AAAF,GAJ6B,CAAjC;AAOA,SAAO,OAAOW,IAAI,CAACC,GAAL,CAAUG,kBAAkB,GAAGL,WAArB,GAAmCF,YAApC,GAAoD,CAA7D,EAAgEC,WAAW,GAAG,CAA9E,IAAmF,CAA1F,CAAP;AACH,C,CAED;;;AACA,eAAeS,gBAAf,CAAgCJ,MAAhC,EAAwCK,MAAxC,EAAgDC,kBAAhD,EAAoE;AAChE;AACA,MAAIC,SAAS,GAAG,MAAMtB,QAAQ,CAACiB,GAAT,CAAaC,IAAb,CAClBhB,WADkB,EAElB,2DAFkB,EAGlB,CAACa,MAAD,CAHkB,EAIlB;AAAEd,IAAAA;AAAF,GAJkB,CAAtB,CAFgE,CAQhE;;AACA,MAAIsB,SAAS,GAAG,MAAMvB,QAAQ,CAACiB,GAAT,CAAaC,IAAb,CAClBZ,GADkB,EAElB,mEAFkB,EAGlB,CAACN,QAAQ,CAACwB,IAAV,CAHkB,EAIlB;AAAEvB,IAAAA;AAAF,GAJkB,CAAtB,CATgE,CAehE;;AACA,MAAIwB,eAAe,GAAG,MAAMzB,QAAQ,CAACiB,GAAT,CAAaC,IAAb,CACxBZ,GADwB,EAExB,mEAFwB,EAGxB,CAACc,MAAD,CAHwB,EAIxB;AAAEnB,IAAAA;AAAF,GAJwB,CAA5B,CAhBgE,CAsBhE;;AACA,MAAIyB,WAAW,GAAG,MAAM1B,QAAQ,CAACiB,GAAT,CAAaC,IAAb,CACpBH,MADoB,EAEpB,uCAFoB,EAGpB,EAHoB,EAIpB;AAAEd,IAAAA;AAAF,GAJoB,CAAxB,CAvBgE,CA6BhE;;AACA,MAAI0B,YAAY,GAAG,MAAM3B,QAAQ,CAACiB,GAAT,CAAaC,IAAb,CACrBH,MADqB,EAErB,+CAFqB,EAGrB,EAHqB,EAIrB;AAAEd,IAAAA;AAAF,GAJqB,CAAzB;AAOA0B,EAAAA,YAAY,GAAG,CAACA,YAAY,CAACC,QAAb,EAAD,GAA2BjB,WAA1C;AACAW,EAAAA,SAAS,GAAGA,SAAS,GAAG,IAAxB,CAtCgE,CAsClC;;AAC9BC,EAAAA,SAAS,GAAGA,SAAS,GAAG,GAAxB,CAvCgE,CAuClC;;AAC9BE,EAAAA,eAAe,GAAGA,eAAe,GAAG,GAApC;AACAC,EAAAA,WAAW,GAAI,CAACA,WAAW,CAACE,QAAZ,EAAD,GAA0BD,YAA1B,GAAyCF,eAA1C,GAA8Db,IAAI,CAACC,GAAL,CAAS,EAAT,EAAaQ,kBAAb,CAA5E;AACA,QAAMQ,UAAU,GAAGP,SAAS,GAAGb,YAA/B;AAEA,SAAO,OAAOc,SAAS,GAAGM,UAAZ,GAAyBH,WAAhC,IAA+C,GAAtD;AACH;;AAED,eAAeI,YAAf,CAA4Bf,MAA5B,EAAoCK,MAApC,EAA4C;AACxC,QAAMC,kBAAkB,GAAGrB,QAAQ,CAAC+B,QAAT,CAAkBhB,MAAM,CAACiB,KAAP,CAAa,CAAb,EAAgB,EAAhB,CAAlB,CAA3B;AACA,QAAMC,aAAa,GAAGjC,QAAQ,CAACG,IAAT,CAAcC,UAAd,CAAyBW,MAAzB,CAAtB;AACA,QAAM,CAACmB,SAAD,EAAYC,OAAZ,IAAuB,MAAMC,OAAO,CAACC,GAAR,CAAY,CAC3CvB,kBAAkB,CAACmB,aAAD,CADyB,EAE3Cd,gBAAgB,CAACc,aAAD,EAAgBb,MAAhB,EAAwBC,kBAAxB,CAF2B,CAAZ,CAAnC;AAIA,SAAO;AAAED,IAAAA,MAAF;AAAUc,IAAAA,SAAV;AAAqBC,IAAAA;AAArB,GAAP;AACH;;AAED,eAAeL,YAAf","sourcesContent":["import Compound from '@compound-finance/compound-js';\n\nconst provider = 'INFURA URL HERE (MAINNET)';\n\nconst comptroller = Compound.util.getAddress(Compound.Comptroller);\nconst opf = Compound.util.getAddress(Compound.PriceFeed);\n\nconst cTokenDecimals = 8; // always 8\nconst blocksPerDay = 4 * 60 * 24; // 4 blocks in 1 minute\nconst daysPerYear = 365;\nconst ethMantissa = Math.pow(10, 18); // 1 * 10 ^ 18\n\nasync function calculateSupplyApy(cToken) {\n    const supplyRatePerBlock = await Compound.eth.read(\n        cToken,\n        'function supplyRatePerBlock() returns (uint)',\n        [],\n        { provider }\n    );\n\n    return 100 * (Math.pow((supplyRatePerBlock / ethMantissa * blocksPerDay) + 1, daysPerYear - 1) - 1);\n}\n\n// recives (Address, ticker sybol of underlaying asset, number Of Decimal of underlaying asset)\nasync function calculateCompApy(cToken, ticker, underlyingDecimals) {\n    // amount of Comp Tokens given out to lenders/ borrowers per block \n    let compSpeed = await Compound.eth.read(\n        comptroller,\n        'function compSpeeds(address cToken) public returns (uint)',\n        [cToken],\n        { provider }\n    );\n    // get Comp Token Price with OrcaleSmartContract\n    let compPrice = await Compound.eth.read(\n        opf,\n        'function price(string memory symbol) external view returns (uint)',\n        [Compound.COMP],\n        { provider }\n    );\n    // get Price of underlying asset => cToken represents asset => get current price of that asset\n    let underlyingPrice = await Compound.eth.read(\n        opf,\n        'function price(string memory symbol) external view returns (uint)',\n        [ticker],\n        { provider }\n    );\n    // amount of cTokens that where emitted\n    let totalSupply = await Compound.eth.read(\n        cToken,\n        'function totalSupply() returns (uint)',\n        [],\n        { provider }\n    );\n    // get exchange rate of cToken and underlying asset => 1 cDai can be 10 Dai etc\n    let exchangeRate = await Compound.eth.read(\n        cToken,\n        'function exchangeRateCurrent() returns (uint)',\n        [],\n        { provider }\n    );\n\n    exchangeRate = +exchangeRate.toString() / ethMantissa;\n    compSpeed = compSpeed / 1e18; // COMP has 18 decimal places\n    compPrice = compPrice / 1e6;  // price feed is USD price with 6 decimal places\n    underlyingPrice = underlyingPrice / 1e6;\n    totalSupply = (+totalSupply.toString() * exchangeRate * underlyingPrice) / (Math.pow(10, underlyingDecimals));\n    const compPerDay = compSpeed * blocksPerDay;\n\n    return 100 * (compPrice * compPerDay / totalSupply) * 365;\n}\n\nasync function calculateApy(cToken, ticker) {\n    const underlyingDecimals = Compound.decimals[cToken.slice(1, 10)];\n    const cTokenAddress = Compound.util.getAddress(cToken);\n    const [supplyApy, compApy] = await Promise.all([\n        calculateSupplyApy(cTokenAddress),\n        calculateCompApy(cTokenAddress, ticker, underlyingDecimals)\n    ]);\n    return { ticker, supplyApy, compApy };\n}\n\nexport default calculateApy;"]},"metadata":{},"sourceType":"module"}
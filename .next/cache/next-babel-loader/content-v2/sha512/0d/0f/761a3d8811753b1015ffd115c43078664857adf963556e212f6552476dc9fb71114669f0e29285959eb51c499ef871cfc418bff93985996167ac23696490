{"ast":null,"code":"import Compound from '@compound-finance/compound-js';\nconst provider = 'https://mainnet.infura.io/v3/2fb8e41ed71a4ee6b9541ff73194cea4';\nconst comptroller = Compound.util.getAddress(Compound.comptroller);\nconst priceOracleSmartContractAddress = Compound.util.getAddress(Compound.PriceFeed);\nconst compTokenDecimals = 8;\nconst blocksPerDay = 4 * 60 * 24;\nconst daysPerYear = 365;\nconst ethMantissa = Math.pow(10, 18);\n\nasync function calcuateSupplyApy(cToken) {\n  const supplyRatePerBlock = await Compound.eth.read(cToken, 'function supplyRatePerBlock() returns(uint)', [], {\n    provider\n  });\n  return 100 * (Math.pow(supplyRatePerBlock / ethMantissa * blocksPerDay + 1, daysPerYear - 1) - 1);\n} // recives (Address, ticker sybol of underlaying asset, number Of Decimal of underlaying asset)\n\n\nasync function calculateCompyApy(cToken, ticker, underlyingDecimals) {\n  // amount of Comp Tokens given out to lenders/ borrowers per block \n  let compSpeed = await Compound.eth.read(comptroller, 'compSpeeds(address cToken) public view returns(unit)', [cToken], {\n    provider\n  }); // get Comp Token Price with OrcaleSmartContract\n\n  let compPrice = await Compound.eth.read(priceOracleSmartContractAddress, 'function price(string memory symbol) exterenal view returns(uint)', [Compound.COMP], {\n    provider\n  }); // get Price of underlying asset => cToken represents asset => get current price of that asset\n\n  let underlyingPrice = await Compound.eth.read(priceOracleSmartContractAddress, 'function price(string memory symbol) exterenal view returns(uint)', [ticker], {\n    provider\n  }); // amount of cTokens that where emitted\n\n  let totalSupply = await Compound.eth.read(cToken, 'function totalSupply() public view returns(uint)', [], {\n    provider\n  }); // get exchange rate of cToken and underlying asset => 1 cDai can be 10 Dai etc\n\n  let exchangeRate = await Compound.eth.read(cToken, 'function exchangeRateCurrent() public return(uint)', [], {\n    provider\n  });\n  compSpeed = compSpeed / 1e18;\n  compPrice = compPrice / 1e6;\n  underlyingPrice = underlyingPrice / 1e6;\n  exchangeRate = +exchangeRate.toString() / ethMantissa;\n  totalSupply = totalSupply().toString() * exchangeRate * underlyingPrice / Math.pow(10, underlyingDecimals);\n  const compPerDay = compSpeed * blocksPerDay;\n  return 100 * (ompPrice * compPerDay / totalSupply) * 365;\n}\n\nasync function calculateApy(cTokenTicker, underlyingTicker) {\n  const underlyingDecimals = Compound.decimals[cTokenTicker];\n  const cTokenAddress = Compound.util.getAddress(cTokenTicker);\n  const [supplyApy, compApy] = await Promise.all([calcuateSupplyApy(cTokenAddress), calculateCompyApy(cTokenAddress, underlyingTicker, underlyingDecimals)]);\n  return {\n    ticker: underlyingTicker,\n    supplyApy,\n    compApy\n  };\n}\n\nexport default calculateApy;","map":{"version":3,"sources":["/Users/harrytrippel/Desktop/DEFI/compound-dashboad/apy.js"],"names":["Compound","provider","comptroller","util","getAddress","priceOracleSmartContractAddress","PriceFeed","compTokenDecimals","blocksPerDay","daysPerYear","ethMantissa","Math","pow","calcuateSupplyApy","cToken","supplyRatePerBlock","eth","read","calculateCompyApy","ticker","underlyingDecimals","compSpeed","compPrice","COMP","underlyingPrice","totalSupply","exchangeRate","toString","compPerDay","ompPrice","calculateApy","cTokenTicker","underlyingTicker","decimals","cTokenAddress","supplyApy","compApy","Promise","all"],"mappings":"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","sourcesContent":["import Compound from '@compound-finance/compound-js'\n\nconst provider = 'https://mainnet.infura.io/v3/2fb8e41ed71a4ee6b9541ff73194cea4';\n\nconst comptroller = Compound.util.getAddress(Compound.comptroller);\nconst priceOracleSmartContractAddress = Compound.util.getAddress(Compound.PriceFeed);\n\nconst compTokenDecimals = 8;\nconst blocksPerDay = 4 * 60 * 24;\nconst daysPerYear = 365;\nconst ethMantissa = Math.pow(10, 18);\n\nasync function calcuateSupplyApy(cToken) {\n    const supplyRatePerBlock = await Compound.eth.read(cToken, 'function supplyRatePerBlock() returns(uint)', [], { provider })\n    return 100 * (Math.pow((supplyRatePerBlock / ethMantissa * blocksPerDay) + 1, daysPerYear - 1) - 1);\n}\n// recives (Address, ticker sybol of underlaying asset, number Of Decimal of underlaying asset)\nasync function calculateCompyApy(cToken, ticker, underlyingDecimals) {\n    // amount of Comp Tokens given out to lenders/ borrowers per block \n    let compSpeed = await Compound.eth.read(comptroller, 'compSpeeds(address cToken) public view returns(unit)', [cToken], { provider })\n    // get Comp Token Price with OrcaleSmartContract\n    let compPrice = await Compound.eth.read(priceOracleSmartContractAddress, 'function price(string memory symbol) exterenal view returns(uint)', [Compound.COMP], { provider })\n    // get Price of underlying asset => cToken represents asset => get current price of that asset\n    let underlyingPrice = await Compound.eth.read(priceOracleSmartContractAddress, 'function price(string memory symbol) exterenal view returns(uint)', [ticker], { provider })\n\n    // amount of cTokens that where emitted\n    let totalSupply = await Compound.eth.read(cToken, 'function totalSupply() public view returns(uint)', [], { provider })\n    // get exchange rate of cToken and underlying asset => 1 cDai can be 10 Dai etc\n    let exchangeRate = await Compound.eth.read(cToken, 'function exchangeRateCurrent() public return(uint)', [], { provider })\n\n    compSpeed = compSpeed / 1e18;\n    compPrice = compPrice / 1e6;\n    underlyingPrice = underlyingPrice / 1e6;\n    exchangeRate = +exchangeRate.toString() / ethMantissa\n    totalSupply = totalSupply().toString() * exchangeRate * underlyingPrice / Math.pow(10, underlyingDecimals)\n\n    const compPerDay = compSpeed * blocksPerDay;\n\n    return 100 * (ompPrice * compPerDay / totalSupply) * 365\n}\n\nasync function calculateApy(cTokenTicker, underlyingTicker) {\n    const underlyingDecimals = Compound.decimals[cTokenTicker]\n    const cTokenAddress = Compound.util.getAddress(cTokenTicker)\n    const [supplyApy, compApy] = await Promise.all([\n        calcuateSupplyApy(cTokenAddress), calculateCompyApy(cTokenAddress, underlyingTicker, underlyingDecimals)\n    ])\n    return { ticker: underlyingTicker, supplyApy, compApy }\n}\n\nexport default calculateApy"]},"metadata":{},"sourceType":"module"}
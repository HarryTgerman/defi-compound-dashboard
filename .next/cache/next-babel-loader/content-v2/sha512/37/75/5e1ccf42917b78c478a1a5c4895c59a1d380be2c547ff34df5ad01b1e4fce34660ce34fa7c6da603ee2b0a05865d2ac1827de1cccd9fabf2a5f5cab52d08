{"ast":null,"code":"import _slicedToArray from \"/Users/harrytrippel/Desktop/DEFI/compound-dashboad/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/Users/harrytrippel/Desktop/DEFI/compound-dashboad/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/harrytrippel/Desktop/DEFI/compound-dashboad/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Compound from '@compound-finance/compound-js';\nvar provider = 'https://mainnet.infura.io/v3/2fb8e41ed71a4ee6b9541ff73194cea4';\nvar comptroller = Compound.util.getAddress(Compound.comptroller);\nvar priceOracleSmartContractAddress = Compound.util.getAddress(Compound.PriceFeed);\nvar compTokenDecimals = 8;\nvar blocksPerDay = 4 * 60 * 24;\nvar daysPerYear = 365;\nvar ethMantissa = Math.pow(10, 18);\n\nfunction calcuateSupplyApy(_x) {\n  return _calcuateSupplyApy.apply(this, arguments);\n} // recives (Address, ticker sybol of underlaying asset, number Of Decimal of underlaying asset)\n\n\nfunction _calcuateSupplyApy() {\n  _calcuateSupplyApy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(cToken) {\n    var supplyRatePerBlock;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return Compound.eth.read(cToken, 'function supplyRatePerBlock() returns(uint)', [], {\n              provider: provider\n            });\n\n          case 2:\n            supplyRatePerBlock = _context.sent;\n            return _context.abrupt(\"return\", 100 * (Math.pow(supplyRatePerBlock / ethMantissa * blocksPerDay + 1, daysPerYear - 1) - 1));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _calcuateSupplyApy.apply(this, arguments);\n}\n\nfunction calculateCompyApy(_x2, _x3, _x4) {\n  return _calculateCompyApy.apply(this, arguments);\n}\n\nfunction _calculateCompyApy() {\n  _calculateCompyApy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(cToken, ticker, underlyingDecimals) {\n    var compSpeed, compPrice, underlyingPrice, totalSupply, exchangeRate, compPerDay;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return Compound.eth.read(comptroller, 'compSpeeds(address cToken) public view returns(unit)', [cToken], {\n              provider: provider\n            });\n\n          case 2:\n            compSpeed = _context2.sent;\n            _context2.next = 5;\n            return Compound.eth.read(priceOracleSmartContractAddress, 'function price(string memory symbol) exterenal view returns(uint)', [Compound.COMP], {\n              provider: provider\n            });\n\n          case 5:\n            compPrice = _context2.sent;\n            _context2.next = 8;\n            return Compound.eth.read(priceOracleSmartContractAddress, 'function price(string memory symbol) exterenal view returns(uint)', [ticker], {\n              provider: provider\n            });\n\n          case 8:\n            underlyingPrice = _context2.sent;\n            _context2.next = 11;\n            return Compound.eth.read(cToken, 'function totalSupply() public view returns(uint)', [], {\n              provider: provider\n            });\n\n          case 11:\n            totalSupply = _context2.sent;\n            _context2.next = 14;\n            return Compound.eth.read(cToken, 'function exchangeRateCurrent() public return(uint)', [], {\n              provider: provider\n            });\n\n          case 14:\n            exchangeRate = _context2.sent;\n            compSpeed = compSpeed / 1e18;\n            compPrice = compPrice / 1e6;\n            underlyingPrice = underlyingPrice / 1e6;\n            exchangeRate = +exchangeRate.toString() / ethMantissa;\n            totalSupply = totalSupply().toString() * exchangeRate * underlyingPrice / Math.pow(10, underlyingDecimals);\n            compPerDay = compSpeed * blocksPerDay;\n            return _context2.abrupt(\"return\", 100 * (ompPrice * compPerDay / totalSupply) * 365);\n\n          case 22:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _calculateCompyApy.apply(this, arguments);\n}\n\nfunction calcuateApy(_x5, _x6) {\n  return _calcuateApy.apply(this, arguments);\n}\n\nfunction _calcuateApy() {\n  _calcuateApy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(cTokenTicker, underlyingTicker) {\n    var underlyingDecimals, cTokenAddress, _yield$Promise$all, _yield$Promise$all2, supplyApy, compApy;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            underlyingDecimals = Compound.decimals[cTokenTicker];\n            cTokenAddress = Compound.util.getAddress(cTokenTicker);\n            _context3.next = 4;\n            return Promise.all([calcuateSupplyApy(cTokenAddress), calculateCompyApy(cTokenAddress, underlyingTicker, underlyingDecimals)]);\n\n          case 4:\n            _yield$Promise$all = _context3.sent;\n            _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n            supplyApy = _yield$Promise$all2[0];\n            compApy = _yield$Promise$all2[1];\n            return _context3.abrupt(\"return\", {\n              ticker: underlyingTicker,\n              supplyApy: supplyApy,\n              compApy: compApy\n            });\n\n          case 9:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _calcuateApy.apply(this, arguments);\n}\n\nexport default calcuateApy;","map":{"version":3,"sources":["/Users/harrytrippel/Desktop/DEFI/compound-dashboad/apy.js"],"names":["Compound","provider","comptroller","util","getAddress","priceOracleSmartContractAddress","PriceFeed","compTokenDecimals","blocksPerDay","daysPerYear","ethMantissa","Math","pow","calcuateSupplyApy","cToken","eth","read","supplyRatePerBlock","calculateCompyApy","ticker","underlyingDecimals","compSpeed","COMP","compPrice","underlyingPrice","totalSupply","exchangeRate","toString","compPerDay","ompPrice","calcuateApy","cTokenTicker","underlyingTicker","decimals","cTokenAddress","Promise","all","supplyApy","compApy"],"mappings":"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","sourcesContent":["import Compound from '@compound-finance/compound-js'\n\nconst provider = 'https://mainnet.infura.io/v3/2fb8e41ed71a4ee6b9541ff73194cea4';\n\nconst comptroller = Compound.util.getAddress(Compound.comptroller);\nconst priceOracleSmartContractAddress = Compound.util.getAddress(Compound.PriceFeed);\n\nconst compTokenDecimals = 8;\nconst blocksPerDay = 4 * 60 * 24;\nconst daysPerYear = 365;\nconst ethMantissa = Math.pow(10, 18);\n\nasync function calcuateSupplyApy(cToken) {\n    const supplyRatePerBlock = await Compound.eth.read(cToken, 'function supplyRatePerBlock() returns(uint)', [], { provider })\n    return 100 * (Math.pow((supplyRatePerBlock / ethMantissa * blocksPerDay) + 1, daysPerYear - 1) - 1);\n}\n// recives (Address, ticker sybol of underlaying asset, number Of Decimal of underlaying asset)\nasync function calculateCompyApy(cToken, ticker, underlyingDecimals) {\n    // amount of Comp Tokens given out to lenders/ borrowers per block \n    let compSpeed = await Compound.eth.read(comptroller, 'compSpeeds(address cToken) public view returns(unit)', [cToken], { provider })\n    // get Comp Token Price with OrcaleSmartContract\n    let compPrice = await Compound.eth.read(priceOracleSmartContractAddress, 'function price(string memory symbol) exterenal view returns(uint)', [Compound.COMP], { provider })\n    // get Price of underlying asset => cToken represents asset => get current price of that asset\n    let underlyingPrice = await Compound.eth.read(priceOracleSmartContractAddress, 'function price(string memory symbol) exterenal view returns(uint)', [ticker], { provider })\n\n    // amount of cTokens that where emitted\n    let totalSupply = await Compound.eth.read(cToken, 'function totalSupply() public view returns(uint)', [], { provider })\n    // get exchange rate of cToken and underlying asset => 1 cDai can be 10 Dai etc\n    let exchangeRate = await Compound.eth.read(cToken, 'function exchangeRateCurrent() public return(uint)', [], { provider })\n\n    compSpeed = compSpeed / 1e18;\n    compPrice = compPrice / 1e6;\n    underlyingPrice = underlyingPrice / 1e6;\n    exchangeRate = +exchangeRate.toString() / ethMantissa\n    totalSupply = totalSupply().toString() * exchangeRate * underlyingPrice / Math.pow(10, underlyingDecimals)\n\n    const compPerDay = compSpeed * blocksPerDay;\n\n    return 100 * (ompPrice * compPerDay / totalSupply) * 365\n}\n\nasync function calcuateApy(cTokenTicker, underlyingTicker) {\n    const underlyingDecimals = Compound.decimals[cTokenTicker]\n    const cTokenAddress = Compound.util.getAddress(cTokenTicker)\n    const [supplyApy, compApy] = await Promise.all([\n        calcuateSupplyApy(cTokenAddress), calculateCompyApy(cTokenAddress, underlyingTicker, underlyingDecimals)\n    ])\n    return { ticker: underlyingTicker, supplyApy, compApy }\n}\n\nexport default calcuateApy"]},"metadata":{},"sourceType":"module"}